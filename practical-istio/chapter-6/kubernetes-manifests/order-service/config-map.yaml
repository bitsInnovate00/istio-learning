# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: order-service-config
  namespace: ecommerce
data:
  application.yml: |
    spring:
      application:
        name: order-service

      # Database Configuration
      datasource:
        # Using H2 in-memory database with configuration to prevent early closure
        url: jdbc:h2:mem:orderdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
        username: sa
        password: password
        driver-class-name: org.h2.Driver
        # Connection pool configuration for better performance monitoring
        hikari:
          pool-name: order-service-pool
          maximum-pool-size: 10
          minimum-idle: 5
          connection-timeout: 20000
          idle-timeout: 300000
          max-lifetime: 1200000

      # JPA and Hibernate Configuration
      jpa:
        database-platform: org.hibernate.dialect.H2Dialect
        hibernate:
          ddl-auto: update
        show-sql: true
        properties:
          hibernate:
            format_sql: true
            generate_statistics: true
            session:
              events:
                log: true

      # H2 Console Configuration for Development
      h2:
        console:
          enabled: true
          path: /h2-console
          settings:
            trace: true
            web-allow-others: true

    # Server Configuration
    server:
      port: 8080
      shutdown: graceful
      tomcat:
        threads:
          max: 200
          min-spare: 20

    # Actuator and Observability Configuration
    management:
      # Endpoints Configuration
      endpoints:
        web:
          exposure:
            include: health,metrics,prometheus,info,loggers
          base-path: /actuator
      # Health Check Configuration
      endpoint:
        health:
          show-details: always
          probes:
            enabled: true
          group:
            readiness:
              include: db,diskSpace
            liveness:
              include: ping
        metrics:
          enabled: true
        prometheus:
          enabled: true
      # Metrics Configuration
      metrics:
        tags:
          application: ${spring.application.name}
        distribution:
          percentiles-histogram:
            http.server.requests: true
          sla:
            http.server.requests: 50ms,100ms,200ms,500ms
        enable:
          all: true  # Enable all metrics by default

    # External Service URLs
    service:
      inventory:
        url: http://inventory-service.ecommerce.svc.cluster.local:8081/api/inventory/
        timeout: 3000
      payment:
        url: http://payment-service.ecommerce.svc.cluster.local:8082/api/payments/
        timeout: 3000

    # OpenTelemetry Configuration
    otel:
      exporter:
        otlp:
          endpoint: http://jaeger-collector.istio-observability.svc.cluster.local:4317
      traces:
        sampler:
          probability: 1.0
      resource:
        attributes:
          deployment.environment: ${ENVIRONMENT:production}
          service.namespace: ecommerce
          service.name: ${spring.application.name}

    # Resilience4j Circuit Breaker Configuration
    resilience4j:
      circuitbreaker:
        instances:
          inventoryService:
            failureRateThreshold: 50
            waitDurationInOpenState: 20s
            slidingWindowSize: 10
          paymentService:
            failureRateThreshold: 50
            waitDurationInOpenState: 20s
            slidingWindowSize: 10

    # Logging Configuration
    logging:
      pattern:
        console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} trace_id=%X{traceId} span_id=%X{spanId} - %msg%n"
      level:
        root: INFO
        com.example.istio.order: DEBUG
        org.hibernate.SQL: DEBUG
        org.hibernate.type.descriptor.sql.BasicBinder: TRACE
        com.zaxxer.hikari: DEBUG
        org.springframework.web: INFO
        org.springframework.transaction: DEBUG
        org.springframework.jdbc: DEBUG